pluginManagement {
    repositories {
        mavenCentral()
        maven { url 'https://repo.spring.io/release' }
        // resolve last due to intermittent jcenter issues
        gradlePluginPortal()
    }
}

plugins {
    id 'com.gradle.enterprise' version '3.8.1'
    id 'io.spring.ge.conventions' version '0.0.9'
    id 'com.gradle.common-custom-user-data-gradle-plugin' version '1.6.2'
}

rootProject.name = 'micrometer'

buildCache {
    remote(HttpBuildCache) {
        //url = 'https://ge.micrometer.io/cache/'
        url = 'http://localhost:5086/cache/'
    }
}
gradleEnterprise {
    //server = 'https://ge.micrometer.io'
    server = 'localhost:5086'

    capture {
        taskInputFiles = true
    }
}

include 'micrometer-core'

['core', 'boot2', 'boot2-reactive', 'spring-integration', 'hazelcast', 'hazelcast3', 'javalin', 'jersey3'].each { sample ->
    include "micrometer-samples-$sample"
    project(":micrometer-samples-$sample").projectDir = new File(rootProject.projectDir, "samples/micrometer-samples-$sample")
}

include 'micrometer-test'

['atlas', 'prometheus', 'datadog', 'elastic', 'ganglia', 'graphite', 'health', 'jmx', 'influx', 'statsd', 'new-relic', 'cloudwatch', 'cloudwatch2', 'signalfx', 'wavefront', 'dynatrace', 'azure-monitor', 'humio', 'appoptics', 'kairos', 'stackdriver', 'opentsdb'].each { sys ->
    include "micrometer-registry-$sys"
    project(":micrometer-registry-$sys").projectDir = new File(rootProject.projectDir, "implementations/micrometer-registry-$sys")
}

['core'].each { benchmark ->
    include "micrometer-benchmarks-$benchmark"
    project(":micrometer-benchmarks-$benchmark").projectDir = new File(rootProject.projectDir, "benchmarks/benchmarks-$benchmark")
}

include 'micrometer-bom'
